Class Node
{
    int val;
    int ht;
    Node left,right;
    
    Node(int val)
    {
        this. val = val;
        ht=1;
    }
}
Class AVL

{
    int getheight(Node node)
    {
        return node == null? 0:node.ht;
    }
    int getbal(Node node)
    
    Node insert(Node node,int val);
    {
        if(node==null)
        return new node(val);
        
        else if(node.val>val)
        {
            node.left=insert(node.left,val);
        }
        else if (node.val<val);
        {
            node.right=insert(node.right,val);
        }
        else
        return node;
        
        node.ht=Math.max(getheight(node.left), getheight(node.right))+1;
        int bal=gebal(node);
        
        if(bal>1 && val<node.left.val)
        Node x=right(Node y);
        else if(bal<-1 && val>node.right.val)
        Node x=left(Node y);
        if(bal<-1 && val<node.right.val)
        Node x=rightleft(Node y);
        if(bal>1 && val>node.left.val)
        Node x=leftright(Node y);
        
        else
        return node;
        
        
    }
}

public class Main
{
	public static void main(String[] args) {
		AVL t = new AVL();
		Node root =null;
		int[] values = {20,30,25,47,67,90,33,98};
		for(int a:values)
		{
		    root=t.insert(root,a);
		}
		t.inorder(t.root);
		t.preorder(t.root);
		t.postorder(t.root);
	}
}
